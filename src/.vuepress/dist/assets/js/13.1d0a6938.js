(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{821:function(e,t,n){"use strict";n.r(t);var a=n(73),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v('##CONTAINERS\nContainer pages are not the kind typically visited while perusing\ndocumentation. However, understanding what can be achieved with Suphple\'s\ncontainer promises to pay huge dividends in the long run. But first of all,\nwhat is a container, and what does it "contain", anyway?')]),e._v(" "),n("p",[e._v("At the most basic level, they are object caches â€” you store object\ninstances in them so you don't instantiate multiple versions of the same\nclass and have them running all over the place. As applications grow more\ncomplex, we look onto them to fulfill needs beyond just object caching")]),e._v(" "),n("p",[e._v("Containers are the missing feature of every back end language. They are\nassociated with making concretes out of interfaces but take care of other\ndetails such as hydrating and wiring arguments. One characteristic of a\ngood back end framework is that its container is both versatile and\npowerful enough for the developer to never pull objects out of it directly")]),e._v(" "),n("p",[e._v("For the dynamism and OOP flexibility Suphple programs are expected to have,\ndevelopers should not shy away from actively interacting with the\ncontainer. The framework itself heavily relies on it to achieve the modular\narchitecture.")]),e._v(" "),n("p",[e._v("With that said, we will look at what arsenal it offers its users")]),e._v(" "),n("p",[e._v("Container->spaceNeedsFrom: Doesn't make services implementing interfaces\nstrictly required. Useful while maybe refactoring from one service\nimplementation to another, on a scale spanning multiple controllers")]),e._v(" "),n("p",[e._v("Modules\\CartModule\\Controllers\\CarController\nModules\\CartModule\\Contracts\\ICarService // or CarService\nModules\\CartModule\\Services\\CarServiceImpl //")]),e._v(" "),n("p",[e._v("#Handling circular dependencies\nThese are usually a code smell. Which is why most containers crumble when\nthese are thrown at them. Logical flow ought to be composed in a\nhierarchical manner that expresses the lower level elements as entirely\noblivious of their higher level counterparts. Service return values should\nbe collated at a central point such as the controller and sent to\nevaluating service. Such situations are usually an indication that some\npart of those services should exist on their own. This enriches the\napplication with a decoupled dependency chain, and by extension,\ntestability")]),e._v(" "),n("p",[e._v("That said, \"tell, don't ask\" principle may appeal to some, and services can\nwind up in the constructor of their own dependencies. For instance, it may\nbe undesirable to retrieve values from service x and plug into y (show\nexample of chatty controller). In such cases, Suphple's container handles it using an otherwise, primitive implementation of class templates/generics/decorators")]),e._v(" "),n("p",[e._v("class A {")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("function __construct(B $foo) {\n    dump($foo);\n    // $this->foo = $foo;\n}\n")])])]),n("p",[e._v("}")]),e._v(" "),n("p",[e._v("class B {")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("function __construct(A $foo) {\n    dump($foo);\n    // $this->foo = $foo;\n}\n")])])]),n("p",[e._v("}")])])}),[],!1,null,null,null);t.default=o.exports}}]);