(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{823:function(e,t,n){"use strict";n.r(t);var o=n(73),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v('Docs\n#introduction\nSuphple (derived from the English word, "supple") is a php microframework\nthat by default, ships with an mvvm paradigm\nfor creating stateful web applications. It builds upon some of the\nindustry\'s most trusted components, but can equally get out of the way for\nyou to insert libraries that make you feel more at home. Its recommended\nstack is STT (Suphple-Transphporm-Turbo)')]),e._v(" "),n("p",[e._v("One of the differences that [link to #motivation] sets it apart from other efforts in the same\ncategory is the architectural changes it advocates: Domain Driven Design,\nmodular architectures, decoupled components, SOLID principles, slim\ncontrollers, and service oriented architectures. If those terms appeal to\nyou, Suphple might be worth giving a shot.")]),e._v(" "),n("p",[e._v("While building your projects with it, expect to often trigger custom\nevents, extend your classes -- which could be anything from routes to\ncontrollers or services; in short, you'll be performing practices for\nfrequently changing, dynamic, and testable web applications.")]),e._v(" "),n("p",[e._v("It equally expects such programs to be patronized by large traffic, and retain the performance of a typical hello world introductory tutorial. Going forward, integration with asynchronous frameworks is slated [link to roadmap] to commence any time in the near future, both in order to curb the concurrency concern and deliver responses at unbeatable speeds")]),e._v(" "),n("p",[e._v("#how does it compare against others?\nPresent performance benchmarks")]),e._v(" "),n("p",[e._v("#sustainability\nGiven the fact that Suphple is the framework of choice to power a number of\nlong term projects currently in the works, there is no doubt that it'll be\nthe subject of constant updates improving it both in the near and distant\nfuture")]),e._v(" "),n("p",[e._v("#Closing remarks\nIf you are yet to relate with any of these use cases and would like to have\nit looked into, do not hesitate to contact me to discuss what your\nrequirements look like. But if you are curious to learn more concerning the\ndetails of this overview, well, welcome aboard!")]),e._v(" "),n("p",[e._v("I hope you enjoy the rideðŸš¤")]),e._v(" "),n("p",[e._v("#quote\nThe love you have for what you build naturally reflects in the artsy\nattention paid to it. What if everything could be built that way without\nthe costly expense of tedium?")]),e._v(" "),n("p",[e._v("##MOTIVATION\nDespite the multitude of frameworks already existing, and the few globally successful ones, Suphple was created for purposes discussed below.")]),e._v(" "),n("p",[e._v("Programming language books teach its readers syntax and how to write code. Current frameworks implement common application features and structure them in ways that apply to a majority of use-cases. No current category of software caters to enabling its users maintain existing projects; only medium-to-advanced level articles assist in this regard. Maintaining software boils down to tests. With this in mind, it may be helpful if the next generation of development tools geared more towards enabling its users write code with the conscious aim of elegant extension or modification. This translates to a number of things:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("- maintainers need to understand that adding new features goes beyond simply changing existing methods or sprinkling new endpoints\n- product owners need to understand how indispensable tests are\n- developers ought to assume their successor doesn't know all the program's capabilities before they can confidently extend the project\n")])])]),n("p",[e._v("Automated tests are at the heart of it all. No matter how many design patterns are followed to the letter, dreadful outcomes are inevitable in their absence. It's a little curious how their mere existence is so crucial to a product's quality, yet the end user is blissfully unaware of them. For this reason, developers are known to avoid them. The average developer's priority is to churn out as much features as possible in the shortest amount of time. The next generation of frameworks should assist in this crusade by vindicating the quality of what is being built before and during its shipment to production")]),e._v(" "),n("p",[e._v("In other words, Suphple's most important mission is for developers to create projects that don't break in production, because they are being properly maintained. Every other fancy terminology and core functionality is a means to that end. Dependency decoupling, auto-wiring, canary routes, flows; they are worth nothing if your program still responds in unexpected ways when it matters most")]),e._v(" "),n("p",[e._v("If you are visiting this page first before going through the rest of the documentation, those parts don't simply describe what functionality is possible, but delve deeper into what aspects of development require them")]),e._v(" "),n("h1",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])]),e._v(" "),n("p",[e._v("Basics...Anatomy of a tilwa app")]),e._v(" "),n("ol",[n("li",[e._v("Adapters (ORM, Auth), libraries, configs, tests (integration, feature)")]),e._v(" "),n("li",[e._v("Adapter concretes, middleware, error handlers")]),e._v(" "),n("li",[e._v("Framework (routing, container, managers)")]),e._v(" "),n("li",[e._v("Controllers, events, requests")]),e._v(" "),n("li",[e._v("Services, repo (consume libraries, adapter concretes)")]),e._v(" "),n("li",[e._v("Tests (assert the two above)")])]),e._v(" "),n("p",[e._v("Each level points inward to the one(s) below it")]),e._v(" "),n("p",[e._v("The typical module only interferes slightly at 2), then from 4) till the end")]),e._v(" "),n("p",[e._v("App enters at 3) and combines everything below it in order to produce a response")]),e._v(" "),n("h1",{attrs:{id:"-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[e._v("#")])]),e._v(" "),n("p",[e._v("Then request lifecycle. Suphple requests embark on quite the eventful\njourney......")]),e._v(" "),n("p",[e._v("There are 3 different kind of requests, which are in turn, subdivided into\ntheir subcategories. We have login requests, flow requests, and regular\nrequests")]),e._v(" "),n("p",[e._v("For regular requests, base objects (router, event manager etc.)\ninstantiated after module initialization point is crossed take on a new dimension â€” one with\ncontext and purpose within its module. Mere autoload is no longer enough to\nfully grasp the classes intended objective without scope")]),e._v(" "),n("h1",{attrs:{id:"-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[e._v("#")])]),e._v(" "),n("p",[e._v("Start out the common concepts simple, without assumption that dev knows\nwhat they are ie. Controllers are where the behaviour behind each endpoint\nis decided. Request objects are the way to intercept path placeholder and\npayload bodies. Route definitions are controller adapters; which means that\nfor all the power controllers are known to wield, they are answerable to\nwhat\nis being dictated from route definitions. As will soon be seen with route\ncollections, one can plug in various coexisting controller implementations\nas the need may be")]),e._v(" "),n("p",[e._v("##CREDITS\nSuphple was created by Nmeri Alphonsus, a software architect who has spent\nthe last few years breaking and plumbing user stories at a fast paced\nstartup. He is poised to build upon the foundations left behind by the\npresent day web landscape, and leave the practice in a better state than he\nmet it")]),e._v(" "),n("p",[e._v("Suphple is one of his efforts to transform potential technical debt into a\npalpable mass of lasting solutions. This documentation makes reference to\nthe many review cycles (earlier\ndrafts) required to determine how best to convey the author's intents and\nphilosophies")]),e._v(" "),n("p",[e._v("If you want to reach out to crack open a feverish discourse concerning game\nof thrones, Lionel Messi, dank memes, some riveting software engineering\nconcept or anything at all concerning Suphple, he will anxiously be waiting\nover at the mailbox. Or, if you're one of the cool kids, you can ping him\non Twitter instead. Happy coding!")]),e._v(" "),n("p",[e._v("##CANARIES AND FEATURE TOGGLING\n*jump to content/ interlude")]),e._v(" "),n("p",[e._v("An often encountered scenario is that of short-lived features implemented\nwithin our app, or perhaps, we're opening up a feature to a group of users.\nThese are actually two distinct occurrences. The latter is an attempt to\ndecipher which group of features eventually become integrated into the main\napplication. The standard term for this is canary releases. On the other\nhand, the former involves temporary updates we want all users to utilize\nThe situation with canary releases is often solved at the deployment level.\nThe devops engineers are looked upon to route a small subsection of random\nusers to parallel instances of our project. But what happens to teams/ solo\ndevelopers without access to complimentary devops members?")]),e._v(" "),n("p",[e._v("There are two common ways of globally managing feature states. The first\none relies on a devops guy to deploy the feature branch (and revert to the\nmain branch). The second approach follows reading the availability of such\nfeature from a feature toggle file, a .env, database, or what have you")]),e._v(" "),n("p",[e._v("While these do work, we tend to leave behind dead code at the toggle points\nwhen we're no longer interested in those features. At times like this, our\nlogic layer becomes cluttered with conditionals that will never run.")]),e._v(" "),n("h1",{attrs:{id:"-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-4"}},[e._v("#")])]),e._v(" "),n("p",[e._v("Canary releases should protect URLs under it from direct access, except\nusers are authorized to be there. Thus, it makes sense for calls for user\nfetching is restricted to those matching criteria in the canary. This\nfeature can equally be used when implementing gates")]),e._v(" "),n("p",[e._v("##ROUTING")]),e._v(" "),n("p",[e._v("Route methods PATH_id_EDIT_id2. Double underscore with all uppercase = 1\nunderscore. One underscore = hyphen. Underscore before all uppercase =\nslash. Underscore before all lower case = placeholder\nPATH_foo_EDIT_bar0 // the 0 trailing bar makes it an\noptional parameter?")]),e._v(" "),n("p",[e._v("Request is null inside route permissions but is available in the service\npermissions method")]),e._v(" "),n("h1",{attrs:{id:"-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-5"}},[e._v("#")])]),e._v(" "),n("p",[e._v("While it's neater to initialize renderers in a collection's constructor,\nsince only one would get used, considering methods aren't evaluated except\ntheir pattern matches, instantiating new ones pays off in the long run")]),e._v(" "),n("h1",{attrs:{id:"-6"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-6"}},[e._v("#")])]),e._v(" "),n("p",[e._v("Api endpoints are backwards compatible. Backwards, then compatible. We need\nthe given version of a path. If it isn't specified on this version, we look\nfor it on the previous version, recursively\nLazy loading the route classes on demand")]),e._v(" "),n("p",[e._v("In the route register\nBrowserRoutes = // calling api mirror on those classes populates below\nobject, while preventing routes we only want to have gui routes from\ngetting in there")]),e._v(" "),n("p",[e._v("ApiRoutes = [V1 => this->browserRoutes(), v2 => classB ] //")]),e._v(" "),n("ol",[n("li",[e._v("request comes in for v1, we skip v2")]),e._v(" "),n("li",[e._v("v2, we slice the array from v2, and load backwards till a match is\nfound")])]),e._v(" "),n("h1",{attrs:{id:"-7"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-7"}},[e._v("#")])]),e._v(" "),n("p",[e._v("The routes are loaded into arrays keyed by the last slash ie. Routes under\n/store go into an array. If the incoming url doesn't match that base path,\nwe avoid delving deeper to parse")]),e._v(" "),n("p",[e._v("You don't have to Extend api route collections. we're not reading its\nparents automatically from a numerically indexed array of versions cuz it\nwon't be immediately understood by a human reader")]),e._v(" "),n("p",[e._v("##REQUESTS")]),e._v(" "),n("p",[e._v("Set payload should only work with predefined properties")]),e._v(" "),n("p",[e._v("While it may seem daunting to create custom request objects, recall that\nApplications\ncrumble when its user is allowed to do unexpected things. It always pays\noff when their every move is anticipated in the sandbox of a custom class")]),e._v(" "),n("p",[e._v("##FLOWS\nFlows can be thought of as short lived caches preemptively fetching all of\na user's possible requests in the background. Due to this temporary\nintention, they aren't updated when their original content changes on the\ndatabase*")]),e._v(" "),n("p",[e._v("*although there is an open issue to the effect")]),e._v(" "),n("h1",{attrs:{id:"-8"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-8"}},[e._v("#")])]),e._v(" "),n("p",[e._v("Without prefetching/flow testing, it's safe to leave in the side effects in\nyour controller. Otherwise, the data layer for get queries shouldn't\ncontain side effects. Side effects for an route named \"product/fetch\"\nshould trigger an event with either the route name or action method as\nevent name")]),e._v(" "),n("h1",{attrs:{id:"-9"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-9"}},[e._v("#")])]),e._v(" "),n("p",[e._v("Flow request takes arguments informing it")]),e._v(" "),n("ol",[n("li",[e._v("all possible routes user can visit next from here")]),e._v(" "),n("li",[e._v("what parameters we're fetching ie. Instead of prefetching all products,\nwe could instruct it to prefetch on products returned in the previous\nresponse")])]),e._v(" "),n("h1",{attrs:{id:"-10"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-10"}},[e._v("#")])]),e._v(" "),n("p",[e._v("Post request can't make optimistic fetches because they're expected to be\nvalidated")]),e._v(" "),n("h2",{attrs:{id:"-11"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-11"}},[e._v("#")])]),e._v(" "),n("p",[e._v("Flow request uses a pub sub pattern ie. Publishing to all flows containing\noutgoing route (same way we pick event external handlers). Furthermore,\neach write to the redis data store by a queried database result set\nsubscribes to that topic. Each write to the database looks up subscriptions\nmatching the criteria")]),e._v(" "),n("p",[e._v("##MODULES")]),e._v(" "),n("p",[e._v("#Preamble: the modular philosophy\nOne of the great dividends of building opinionated structures is that it\nsolves the architectural problem for its eventual user. With that out of\nthe way, they are left to think in services -- isolated, exportable\nmicro-units of logic. Think of it as a design system for back ends. Every\nmature design system has a user-contributed gallery of components\nconforming to its principles. /That/ is one of the eventual dreams with\nSuphple; that\nprojects can be commenced and executed with the aid of extended, freely\navailable\ndomain-specific business-oriented micro-dependencies, with nearly identical\ncoding styles")]),e._v(" "),n("p",[e._v("configuration passed into Modules should be assigned to instance level\nproperties. Inside the relevant service provider/config, the module will be type\nhinted, and the value lifted")]),e._v(" "),n("p",[e._v("Each module should have its own vendor folder i.e. None at the root")]),e._v(" "),n("p",[e._v("#when to create a new module\nWhile there are an infinite number of factors deciding when part of an\napplication should gain autonomy, a few are logical. But there's no\nstandard cast in stone â€” only a few general rules of thumb. One obvious\nindicator is them having the same route prefix. As for unrelated concepts,\nIt is usually safer for them to start out as separate modules dependent on\neach other, and only be merged into one when the interactions between them\nbecomes more than trivial. If module A's controller is dominated by calls\nto different services borrowed from a module it depends on, it could mean\nthey belong together")]),e._v(" "),n("p",[e._v("Look at methods on the module file")]),e._v(" "),n("p",[e._v("##EVENTS\nA criminally overlooked part of back end engineering. Suphple would\nrestrict\nall read/write database operations to be only executable within the context\nof a specific side-effect event handler. But for the sole purpose of\ncommands whose producers are more optimized with synchronous responses,\nsuch imposition was left to the developer's discretion. A fine example\nbeing our module sending a create event for a related model within the\nboundaries of another module")]),e._v(" "),n("p",[e._v("One line of defense against this obstacle advocates against the use of\nrelational models in service oriented architectures. A less drastic opinion\nsuggests making use of guids instead of auto incremented ids. Whatever\ndesign decision is made based on these considerations, events are expected\nto be an important part of it. Pay attention at seams for operations whose\nresults are of no importance to the response")]),e._v(" "),n("p",[e._v("Mention event cascading")]),e._v(" "),n("p",[e._v("##QUEUES\nEvents are a direct precursor to queues. Think of them as deferred events.\nIf events are a way of extracting unrelated code from visual flow and\nopening up code for injecting and extending, queues are a way of delegating\nthe event bootstrap and invocation process\nWhile it may be tempting to defer events and functionality, beware of\nbusiness requirements making it unrealistic to dispense value without\nawaiting completion of an orderly sequence of activities")]),e._v(" "),n("p",[e._v("##LARAVEL INTEROPERABILITY\nIf you are sold on Suphple's features already but remain reluctant due to\nyour missing favourite laravel library, there is cheering news. There's no\nneed to feel left out, because chances are your dependencies will still\nwork as expected*")]),e._v(" "),n("p",[e._v("One of laravel's most notable features is in its extensibility and\ntremendous flexibility. What this means is that its regular booting process\ncan be hijacked and replicated within foreign territory")]),e._v(" "),n("p",[e._v("But as a package developer, don't get carried away into building new\nlaravel packages just because they are cross platform. The process of\nbooting a laravel application instance in the background is an expensive\none whose specific cost can be calculated by how demanding the package\nbeing provided is. Packages registering views, routes, and configs\ntypically cost more those that register only one of those")]),e._v(" "),n("p",[e._v("Beyond that, care is taken to prevent procedural helper functions that may\nbe present in those packages from leaking into your app. This\nresponsibility comes with its own overhead")]),e._v(" "),n("p",[e._v("In summary, it works, but should be used as band aid for Suphple's current\nlack of packages")]),e._v(" "),n("h1",{attrs:{id:"-12"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-12"}},[e._v("#")])]),e._v(" "),n("p",[e._v("User plugs in their service providers in a laravelProviders array labelled\nby the class in the provider's register method. Then, we kind of imitate\nthe same functionality of registering routes, views etc within our own scope")]),e._v(" "),n("p",[e._v("In order to prevent facades being used in place of real object names, there\nis another verification to ensure instance name matches A's request")]),e._v(" "),n("p",[e._v("*Another reason the package may not work is if it's a Laravel plugin i.e.\nseeks to replace laravel core functionality such as the router, or more\nappropriately, interfaces that don't exist on Suphple")]),e._v(" "),n("p",[e._v("##TESTING")]),e._v(" "),n("p",[e._v("Tests are always ordered last in both books and framework documentation,\nbecause they don't contribute directly to what end user interacts with. This approach creates so many developers who either don't know how to automate their tests, or lack\nthe time to do so. It takes the few who have seen first hand through the\ncrystal ball of tests, to appreciate how indispensable it is. It is the\nonly insurance that can give a code maintainer the confidence required to\nalter existing code without fear of damaging other parts of the system. It\nequally forms the basis of the bravery behind presenting features meeting\nup to business needs.")]),e._v(" "),n("p",[e._v("Much can be said about providing methods for making testing easier, but\nvery little is said concerning the key thing which is coding standards\nthese methods can be properly applied to. A good, opinionated framework\nguides its users towards achieving this, rather than leaving them to devote\ntheir time to studying such arts")]),e._v(" "),n("p",[e._v("While TDD advocates may attempt to downplay the tedium of tests, in\nsincerity, it takes careful commitment to get right. It generally entails\nstubbing method calls, database seeding, mocking object states, and\nexpecting certain outcomes, which is the part we are ultimately interested\nin. But putting it all together is what distinguishes a codebase one update\naway from disaster, from another")]),e._v(" "),n("p",[e._v("Now that we have a solid grasp of the gravity of tests, we may move on to\nwhat techniques Suphple provides to aid its developers on this voyage")]),e._v(" "),n("p",[e._v("Non TDD activists can run php Suphple testgen. With that nifty command,\nthey\nget a bumper package of feature tests, integration/http tests, unit tests,\nhappy and sad path test cases out of the box!")]),e._v(" "),n("p",[e._v("There may be some criticism surrounding a program's knowledge of written\nsoftware. And to be honest, it's a valid argument. Only the developer has an\nexhaustive business knowledge of his software's intricacies. Suphple merely\ntries to help, by applying heuristics derived from all valid sources fed to\nit")]),e._v(" "),n("p",[e._v("Tests offer confidence when shipping new code but at the cost of additional\ntime and effort. Generated tests are not direct replacement for developers\ntesting their applications in quirky ways unpredictable at scale. But it\nseeks to leave only edge case tests to the developer\nIt mostly works under the premise that the developer adheres to immediate\nimplementation of business requirements rather than TDD")]),e._v(" "),n("p",[e._v("##SERVICES AND CONTROLLERS\nWhile decisive steps are put in place on controllers to drive the point of\nmicro services home, the onus of writing atomic services lies in the\ndeveloper's\nhands. It is up to you to recognize and extract recurring patterns or\nbehaviour in your services into individual private methods")]),e._v(" "),n("h1",{attrs:{id:"-13"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-13"}},[e._v("#")])]),e._v(" "),n("p",[e._v("Validating dependencies at runtime may raise some eyebrows, especially when\nthere are less on-demand solutions such as validating the code base after\neach update. It is assumed that the barrier for syntax memorization is so\nlow, any beginner can get in â€” junior developers who should not be trusted\nto\nknow what they're doing. In exchange, the cost of validation is a few micro\nseconds in performance. If it's either not a price you are willing to pay,\nperhaps out of trust in your abilities and that of your colleagues, the\ncontroller configuration setting method \"validates\" should return false")]),e._v(" "),n("h1",{attrs:{id:"-14"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-14"}},[e._v("#")])]),e._v(" "),n("p",[e._v("Super classes aren't returned when consumers try to pull their sub classes\nbecause there's simply no way for the consumer to know a sub exists.\nHowever, providing base classes can be served to a known type of consumers.\nTo illustrate, consider (convert this to code) X is a sub-class of Y, B is\nthe sub of A")]),e._v(" "),n("ol",[n("li",[e._v("A pulls X --\x3e only works if A provided X")]),e._v(" "),n("li",[e._v("B pulls Y --\x3e works if A provided Y")])]),e._v(" "),n("p",[e._v("Scenario 2 is useful when a variable group of classes with a base type need\nto provide an immutable or unchanging instance\nIn order to achieve scenario 1, convert Y to an interface and provide X as\nan implementation")]),e._v(" "),n("p",[e._v("#model hydration")]),e._v("\n<?php\nfunction jj (NewsRequest $request, ControllerModel $newData) { // conceals \nNews::where(id, id) stored on property x\n\n        $this->newsRepository->updateJj($newData, $request); // cleaner. \ngets are lazier and under developer's control. avoids duplicating builders\n}\n\n#Logic Factories\nFor adequately testing all possible use cases, alternate flow paths \n(control flow, not Suphple flow) must be visited as well. At each endpoint, \nwe dive deeper by testing its range of output. By using a declarative \nsyntax, we're able to able to inform the framework this is an alternate \npath of execution, we try to fulfill that condition and test it as well.\n\nSee https://pastebin.com/8idvNsyu\n\n##CONTRIBUTION GUIDELINES\nIt is emotionally uplifting that you feel compelled to take time out of \nyour schedule to invest in what makes Suphple tick. However, the \nbreathtaking \nimprovements you are bringing on board will be better received if it meets \na few non-negotiable criteria. This is not to say your modalities are \ninaccurate, but it's an attempt to ensure a consistent, homogenic \nfundamental code style.\n\nFirst and foremost, there is no need for includes or requires anywhere. \nTraits should be avoided in favour of object composition/aggregation. \"Magical\" \nbehaviour such as facades should be kept at arm's length. If you have to \ndecide between creating a fairly attractive API, and performing arcane \nactions that obscure intuitive use of the language, sacrifice the beautiful \nAPI. It doesn't pay off in the long run when new persons are battling to \ngrasp how things work\n\nFunctions/closures should be avoided at all costs. They either violate the \ninclude rule or live in global scopes that bring ridicule to this great \nlanguage\n\nEven when attributes are implemented as a core language feature, avoid the \ntemptation to support route definition in files. While it provides an \nopportunity for co-locating endpoints and their corresponding handlers, it \nquickly becomes undesirable when the need for tracing an endpoint arises \n\nPrefer creating DTOs over using associative arrays\n\nThat's it. If we are in agreement, we can then examine features on the roadmap or discuss something new not there yet\n\n\n##CONTAINERS\nContainer pages are not the kind typically visited while perusing \ndocumentation. However, understanding what can be achieved with Suphple's \ncontainer promises to pay huge dividends in the long run. But first of all, \nwhat is a container, and what does it \"contain\", anyway?\n\nAt the most basic level, they are object caches â€” you store object \ninstances in them so you don't instantiate multiple versions of the same \nclass and have them running all over the place. As applications grow more \ncomplex, we look onto them to fulfill needs beyond just object caching\n\nContainers are the missing feature of every back end language. They are \nassociated with making concretes out of interfaces but take care of other \ndetails such as hydrating and wiring arguments. One characteristic of a \ngood back end framework is that its container is both versatile and \npowerful enough for the developer to never pull objects out of it directly\n\nFor the dynamism and OOP flexibility Suphple programs are expected to have, \ndevelopers should not shy away from actively interacting with the \ncontainer. The framework itself heavily relies on it to achieve the modular \narchitecture.\n\nWith that said, we will look at what arsenal it offers its users\n\nContainer->spaceNeedsFrom: Doesn't make services implementing interfaces \nstrictly required. Useful while maybe refactoring from one service \nimplementation to another, on a scale spanning multiple controllers\n\nModules\\CartModule\\Controllers\\CarController\nModules\\CartModule\\Contracts\\ICarService // or CarService\nModules\\CartModule\\Services\\CarServiceImpl //\n\n\n#Handling circular dependencies\nThese are usually a code smell. Which is why most containers crumble when \nthese are thrown at them. Logical flow ought to be composed in a \nhierarchical manner that expresses the lower level elements as entirely \noblivious of their higher level counterparts. Service return values should \nbe collated at a central point such as the controller and sent to \nevaluating service. Such situations are usually an indication that some \npart of those services should exist on their own. This enriches the \napplication with a decoupled dependency chain, and by extension, \ntestability\n\nThat said, \"tell, don't ask\" principle may appeal to some, and services can \nwind up in the constructor of their own dependencies. For instance, it may \nbe undesirable to retrieve values from service x and plug into y (show \nexample of chatty controller). In such cases, Suphple's container handles it using an otherwise, primitive implementation of class templates/generics/decorators\n\nclass A {\n\n    function __construct(B $foo) {\n        dump($foo);\n        // $this->foo = $foo;\n    }\n}\n\nclass B {\n\n    function __construct(A $foo) {\n        dump($foo);\n        // $this->foo = $foo;\n    }\n}\n\n##SERVICE PROVIDERS\nService providers are classes used by the framework to bind concrete \ninstances to its interface. If that sounds familiar, that is because it was \nmentioned in the entity binding section of the module descriptor page. \nIndeed, both have a similar function, their only difference being that \nservice providers offer additional room for \"booting\" the newly created \ninstance\n\nWhat methods do they contain? Who do they extend? They don't work on super \nclasses\n\nDevelopers coming from laravel may expect to see more details concerning \nthe introduction of external libraries through this medium. However, \nSuphple \ndiffers in that such tweaks are achieved by means of configuration classes \nand modules\n\nFor instance, one who intends to do x might be better off...\n\nExplain how here or link to those pages\n\n\n##AUTH\n*Login request\n        - matches config login route? pick config login service and attempt \nlogin\n        - set this service as the renderer controllers\n        - depending on a)'s result, one of b)'s renderers are executed\n        - executioner expects to receive an AuthStorage that determines \nwhether it's session or jwt request is getting back\n\n\n#Review this\nRequest for auth route comes in:\n        - depending on the authentication type (jwt/session/custom ), user \nid is retrieved\n        - this id is forwarded to a reliable person accessible to \ncontrollers/request/container who are interested in retrieving auth user\n        - in the background, he receives a concrete orm from any container \navailable and can hydrate a user out of the id he was given\n        - he is also overwritable in case dev wants a custom way of user \nhydration\n        - he's the one responseManager interfaces with and decides a user \nis unauthenticated when his id is missing\n\n\n##AUTHORIZATION\nAuthorization is divided into two categories: route based protection and a \nentity/model based approach. Of the two, the latter is both more flexible and \nmore powerful. With it in place, you will have little use for its \ncounterpart.\n\nRoute authorization occurs at a high level covering routes below it. But \nits utility shines better for paths that don't interact with the underlying \ndatabase. Routes computing data or communicating with external clients are \nencouraged to be protected at the route layer when they grant access to \nprivileged users\n...\nAuthorization is often wrongly relegated to being used for restricting \naccess to administrative dashboards. However, their usefulness transcends \nthat. \n\nEvery resource created by authenticated users is usually stored with a \nreference to its creator â€”posts, comments, products, and what have you. In \nmost applications, we want to restrict CRUD access of such resources to \ntheir creator. The risk of merely receiving resource identifiers for the \ncurrently logged in user implies they can violate the privacy of other \nusers by simply transferring identifiers to their resources over the wire\n\nBy securing them at the model layer, one can be guaranteed that those \nresources are constantly in the safe hands of their creator, site \nadministrator, collaborator, and the application's developer. Without such \ncontraceptive in place, new additions to a team, implementing new features, \nwill either need to be aware of existing authorization rules for those \nresources, roll out a new one, or worse, expose them to the whole world!\n\nIt equally provides the added advantage of centralizing module rules to \nwhere one can quickly glance at available permissions for each resource\n\n\n##A WORD ON MICROSERVICES\nOne notable edge microservices have over modular monoliths is in the way internal services can be scaled behind a load balancer. This is for applications seeking to cater for expanded activity on specific parts of the bigger picture. It's a limitation monoliths simply \ncannot afford due to the nature of their deployment\n\naka if you have no need for this, don't bother going that direction\n\n##MIDDLEWARE\nSince routes are being composed down tries, route collections middlewares \nshould contain references to what pattern method they are bound to.\n\nWe only need middlewares to transform response or request objects over a \ngroup of action handlers\n\nThey're bound to the collection, not the renderer\n\nHow do we pass arguments to middleware from their definition point? How do \nI register global middleware that runs on all requests?\n\n\n##PLUGINS\nOur emphasis on decoupling means domain module authors are encouraged to build \naround standardized interfaces for decreased coupling. A sample library is a module \nwhose exports class must implement the library for the category it belongs \nto. For instance, paystack library implements the payment gateway module. \nIn the consuming module, we define Suphple payment gateway interface as one \nof the depends, and plug in paystack or flutterwave libraries in the provider\n\nYou can either have libraries giving new functionality to the developer or \nthose overriding default framework behaviour. For the latter to be \npossible, we have to operate with interfaces, load our own implementation \nduring boot, and pull them from the container.\nWe can either do this everywhere or at positions we intend leaving open for \nextension such as the object that boots controller arguments\nThe difference between both is that packages/libraries are framework \nagnostic. Or at least, they are meant to be. They ought to rely on language \nconstructs for implementing functionality. Plugins on the other hand, are \nfor replacing existing \nfunctionality in the framework\n\nDoc readers want to know what classes are overridable\n")])}),[],!1,null,null,null);t.default=a.exports}}]);