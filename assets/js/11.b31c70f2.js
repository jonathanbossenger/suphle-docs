(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{820:function(e,t,n){"use strict";n.r(t);var r=n(73),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])]),e._v(" "),n("p",[e._v("Basics...Anatomy of a tilwa app")]),e._v(" "),n("ol",[n("li",[e._v("Adapters (ORM, Auth), libraries, configs, tests (integration, feature)")]),e._v(" "),n("li",[e._v("Adapter concretes, middleware, error handlers")]),e._v(" "),n("li",[e._v("Framework (routing, container, managers)")]),e._v(" "),n("li",[e._v("Controllers, events, requests")]),e._v(" "),n("li",[e._v("Services, repo (consume libraries, adapter concretes)")]),e._v(" "),n("li",[e._v("Tests (assert the two above)")])]),e._v(" "),n("p",[e._v("Each level points inward to the one(s) below it")]),e._v(" "),n("p",[e._v("The typical module only interferes slightly at 2), then from 4) till the end")]),e._v(" "),n("p",[e._v("App enters at 3) and combines everything below it in order to produce a response")]),e._v(" "),n("h1",{attrs:{id:"-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[e._v("#")])]),e._v(" "),n("p",[e._v("Then request lifecycle. Suphple requests embark on quite the eventful\njourney......")]),e._v(" "),n("p",[e._v("There are 3 different kind of requests, which are in turn, subdivided into\ntheir subcategories. We have login requests, flow requests, and regular\nrequests")]),e._v(" "),n("p",[e._v("For regular requests, base objects (router, event manager etc.)\ninstantiated after module initialization point is crossed take on a new dimension â€” one with\ncontext and purpose within its module. Mere autoload is no longer enough to\nfully grasp the classes intended objective without scope")]),e._v(" "),n("h1",{attrs:{id:"-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[e._v("#")])]),e._v(" "),n("p",[e._v("Start out the common concepts simple, without assumption that dev knows\nwhat they are ie. Controllers are where the behaviour behind each endpoint\nis decided. Request objects are the way to intercept path placeholder and\npayload bodies. Route definitions are controller adapters; which means that\nfor all the power controllers are known to wield, they are answerable to\nwhat\nis being dictated from route definitions. As will soon be seen with route\ncollections, one can plug in various coexisting controller implementations\nas the need may be")])])}),[],!1,null,null,null);t.default=o.exports}}]);