(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{824:function(e,t,n){"use strict";n.r(t);var s=n(73),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("##SERVICES AND CONTROLLERS\nWhile decisive steps are put in place on controllers to drive the point of\nmicro services home, the onus of writing atomic services lies in the\ndeveloper's\nhands. It is up to you to recognize and extract recurring patterns or\nbehaviour in your services into individual private methods")]),e._v(" "),n("h1",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])]),e._v(" "),n("p",[e._v("Validating dependencies at runtime may raise some eyebrows, especially when\nthere are less on-demand solutions such as validating the code base after\neach update. It is assumed that the barrier for syntax memorization is so\nlow, any beginner can get in â€” junior developers who should not be trusted\nto\nknow what they're doing. In exchange, the cost of validation is a few micro\nseconds in performance. If it's either not a price you are willing to pay,\nperhaps out of trust in your abilities and that of your colleagues, the\ncontroller configuration setting method \"validates\" should return false")]),e._v(" "),n("h1",{attrs:{id:"-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[e._v("#")])]),e._v(" "),n("p",[e._v("Super classes aren't returned when consumers try to pull their sub classes\nbecause there's simply no way for the consumer to know a sub exists.\nHowever, providing base classes can be served to a known type of consumers.\nTo illustrate, consider (convert this to code) X is a sub-class of Y, B is\nthe sub of A")]),e._v(" "),n("ol",[n("li",[e._v("A pulls X --\x3e only works if A provided X")]),e._v(" "),n("li",[e._v("B pulls Y --\x3e works if A provided Y")])]),e._v(" "),n("p",[e._v("Scenario 2 is useful when a variable group of classes with a base type need\nto provide an immutable or unchanging instance\nIn order to achieve scenario 1, convert Y to an interface and provide X as\nan implementation")]),e._v(" "),n("p",[e._v("#model hydration")]),e._v("\n<?php\nfunction jj (NewsRequest $request, ControllerModel $newData) { // conceals \nNews::where(id, id) stored on property x\n\n        $this->newsRepository->updateJj($newData, $request); // cleaner. \ngets are lazier and under developer's control. avoids duplicating builders\n}\n\n#Logic Factories\nFor adequately testing all possible use cases, alternate flow paths \n(control flow, not Suphple flow) must be visited as well. At each endpoint, \nwe dive deeper by testing its range of output. By using a declarative \nsyntax, we're able to able to inform the framework this is an alternate \npath of execution, we try to fulfill that condition and test it as well.\n\nSee https://pastebin.com/8idvNsyu")])}),[],!1,null,null,null);t.default=o.exports}}]);